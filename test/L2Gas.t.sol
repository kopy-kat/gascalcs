// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import { Test } from "forge-std/Test.sol";
import { console } from "forge-std/console.sol";
import { UD60x18, ud, intoUint256 } from "@prb/math/src/UD60x18.sol";
import { PRBMathCastingUint256 } from "@prb/math/src/casting/Uint256.sol";
import { LibZip } from "solady/utils/LibZip.sol";

contract L2Gas is Test {
    function compressWithBrotli(bytes memory data)
        internal
        pure
        returns (bytes memory compressed)
    {
        // Todo: Use brotli
        compressed = LibZip.flzCompress(data);
    }

    function getCallDataGas(bytes memory data) internal pure returns (uint256 calldataGas) {
        for (uint256 i = 0; i < data.length; i++) {
            if (data[i] == 0x00) {
                calldataGas += 4;
            } else {
                calldataGas += 16;
            }
        }
    }

    function testGas() public {
        // Op Stack
        uint256 opStackConstant = 2028;
        UD60x18 opStackScalar = ud(0.684e18);

        // dummy 4337 data
        bytes memory data =
            hex"1fad948c00000000000000000000000000000000000000000000000000000000000000400000000000000000000000004a25d28d10b02bcf13a16068f56d167d8f96d093000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000005c0057bb71f81cd398e6b97d6be63bf84a328a9900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000017ed200000000000000000000000000000000000000000000000000000000014dab240000000000000000000000000000000000000000000000000000000000907c53000000000000000000000000000000000000000000000000000000000013850a000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000184519454470000000000000000000000000d56da4a8cf09bec31e22c66209605ff7dfb8ea200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c47a806d6b0000000000000000000000005c0057bb71f81cd398e6b97d6be63bf84a328a990000000000000000000000005c0057bb71f81cd398e6b97d6be63bf84a328a990000000000000000000000002a40683b8664febdcde113cb890f4ccd9b07f55e0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c3838383030303030303838380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000754fd9098af9ddcb41da48a1d78f91f1398965addc00000000000000006596a3310000000000000000000000000000000000000000e1fbec92fc3655585cbc1fa5c006ff13fda74e991e3a53f0e6f3588f14bbad3a53c8b43c8116ddc415ec87c056db9bea6bf1ce2de5785df4f413557cf0eda7dd1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000045000000004b57873178f5278ae5542684fa87059034f24b1cb366dc9cefdc4bdf68cbb5bb58e00ca74b2bf255429af91385aa2dc98355f7bc2a4bc793f6b033e42f0a79801c000000000000000000000000000000000000000000000000000000";

        uint256 opStackL1Gas = intoUint256(
            PRBMathCastingUint256.intoUD60x18(getCallDataGas(data)).mul(opStackScalar)
        ) + opStackConstant;

        uint256 arbitrumL1Gas = getCallDataGas(compressWithBrotli(data));

        console.log("Op Stack L1 Gas: %s", opStackL1Gas);
        console.log("Arbitrum L1 Gas: %s", arbitrumL1Gas);
    }
}
